name: Training Pipeline

on:
  workflow_run:
    workflows: [ "Daily Data Pipeline" ]
    types:
      - completed
  workflow_dispatch:

env:
  MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
  MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_TRACKING_USERNAME }}
  MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_TRACKING_PASSWORD }}
  DAGSHUB_USER_TOKEN: ${{ secrets.DAGSHUB_USER_TOKEN }}
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  DATABASE_NAME: ${{ secrets.DATABASE_NAME }}

jobs:
  train:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Environment
        uses: ./.github/actions/setup-environment
        with:
          dvc_access_key_id: ${{ secrets.DVC_ACCESS_KEY_ID }}
          dvc_secret_access_key: ${{ secrets.DVC_SECRET_ACCESS_KEY }}

      - name: Train model (daily)
        run: |
          poetry run poe train --input btc_price_daily.csv --model reg
          poetry run poe train --input btc_price_daily_classification.csv --model cls

  evaluate:
    needs:
      - train
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Environment
        uses: ./.github/actions/setup-environment
        with:
          dvc_access_key_id: ${{ secrets.DVC_ACCESS_KEY_ID }}
          dvc_secret_access_key: ${{ secrets.DVC_SECRET_ACCESS_KEY }}

      - name: Evaluate model (daily)
        run: |
          poetry run poe eval --type daily --model reg
          poetry run poe eval --type daily --model cls
